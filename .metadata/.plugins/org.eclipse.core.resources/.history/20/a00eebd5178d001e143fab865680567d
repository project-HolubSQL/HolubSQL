
package com.designpattern.holub;

import java.io.FileReader;
import java.io.IOException;

import javax.xml.parsers.ParserConfigurationException;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;
import org.xml.sax.SAXException;

import com.designpattern.database.XMLImporter;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.hamcrest.core.Is.is;
import static org.hamcrest.core.IsEqual.equalTo;

import org.junit.jupiter.api.Test;
import org.springframework.core.io.ClassPathResource;
import org.springframework.util.Assert;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.Iterator;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;

public class XMLImporterTests {
  Logger logger = LoggerFactory.getLogger(XMLImporterTests.class);

  @Test
  public void testXMLImport() throws IOException {
    // Load the XML file from test resources

    String file = "people.xml";
    XMLImporter importer = new XMLImporter(new FileReader(file));

    // Start parsing the table
    importer.startTable();

    // Test table name
    assertEquals("people", importer.loadTableName(), "Table name doesn't match");

    // Test column names and width
    Iterator<String> columnNames = importer.loadColumnNames();
    assertNotNull(columnNames, "Column names should not be null");
    int width = importer.loadWidth();
    // assertEquals(4, width, "Width doesn't match");

    // Test rows
    Iterator<String> row = importer.loadRow();
    // Assert the expected values in each row

    // assertEquals("Holub", row.next(), "First name doesn't match");

    while (row.hasNext()) {
      String rowData = row.next();
      logger.info("Row data: {}", rowData);
    }

    // End table parsing
    importer.endTable();

  }
}
